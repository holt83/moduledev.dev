<?php 

/**
 * Install file for the Entity recipe module.
 */

/**
 * Implements hook_install().
 *
 * Install default vocabularies.
 */
function entity_recipe_install() {
	entity_recipe_install_vocabularies(); // No need to handle errors here???
	entity_recipe_install_terms();
}

/**
 * Implements hook_schema().
 *
 * Defines our entity base tables.
 */
function entity_recipe_schema() {
	// Table for the main ingredient entity.
  $schema['ingredient'] = array(
    'description' => 'Stores information about each ingredient.',
    'fields' => array(
      'iid' => array(
        'description' => 'Primary key',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Name of the ingredient',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'type' => array(
      	'description' => 'The type of this ingredient.',
      	'type' => 'varchar',
      	'length' => 32,
      	'not null' => TRUE,
      	'default' => 'standard',
      ),
    ),
    'primary key' => array(
      'iid',
    ),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );
  // Table for the ingredient bundle type.
  $schema['ingredient_type'] = array(
  	'description' => 'Stores information about defined ingredient types.',
  	'fields' => array(
  		'id' => array(
  			'type' => 'serial',
  			'not null' => TRUE,
  			'description' => 'Primary key: Unique ingredient type ID.',
  		),
  		'type' => array(
  			'description' => 'The machine-readable name of this ingredient type.',
  			'type' => 'varchar',
  			'length' => 32,
  			'not null' => TRUE,
  		),
  		'label' => array(
  			'description' => 'The human-readable name of this ingredient type.',
  			'type' => 'varchar',
  			'length' => 255,
  			'not null' => TRUE,
  			'default' => '',
  		),
  		'weight' => array(
  			'description' => 'The weight of this ingredient type compared to others.',
  			'type' => 'int',
  			'not null' => TRUE,
  			'size' => 'tiny',
  			'default' => 0,
  		),
  		'data' => array(
  			'description' => 'A serialized array with additional data for this 
  				ingredient type.',
  			'type' => 'text',
  			'not null' => FALSE,
  			'size' => 'big',
  		),
  		'status' => array(
  			'description' => 'The exportable status of the entity type.',
  			'type' => 'int',
  			'not null' => TRUE,
  			'size' => 'tiny',
  			// Set to: ENTITY_CUSTOM (Not safe to use constants at this point)
  			'default' => 0x01,
  		),
  		'module' => array(
  			'description' => 'The name of providing module if the entity type has 
  				been defined in code.',
  			'type' => 'varchar',
  			'length' => 255,
  			'not null' => FALSE,
  		),
  	),
		'primary key' => array('id'),
		'unique keys' => array(
			'type' => array('type'),
		),
  );
  // Table for the recipe_ingredient eniity, which describes an ingredient 
  // entity in use in a recipe.
  $schema['recipe_ingredient'] = array(
    'description' => 'Stores information about each ingredient used in a recipe.',
    'fields' => array(
      'riid' => array(
        'description' => 'Primary key',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'rid' => array(
        'description' => 'Foreign key: recipe (imaginary for this example)',
        'type' => 'int',
        'size' => 'big',
        'default' => 0,
        'not null' => TRUE,
      ),
      'iid' => array(
        'description' => 'Foreign key: ingredient',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'qty' => array(
        'description' => 'Numerical quantity of units',
        'type' => 'float',
        'not null' => TRUE,
      ),
      'qty_unit' => array(
        'description' => 'Name of units',
        'type' => 'varchar',
        'length' => 255,
        'default' => "''",
        'not null' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'ingredient_on_recipe' => array(
        'table' => 'ingredient',
        'columns' => array('iid' => 'iid'),
      ),  
    ),
    'primary key' => array(
      'riid',
    ),
  );

  return $schema;
}

/**
 * Installs the default vocabularies needed by the module.
 *
 * @return
 *   Returns the machine_name if there was an error during installation,
 *   false otherwise.
 */
function entity_recipe_install_vocabularies() {
	$vocabularies = _entity_recipe_default_vocabularies();
	foreach ($vocabularies as $machine_name => $vocabulary) {
		// We don't want to override existing vocabularies
		$conflict = taxonomy_vocabulary_machine_name_load($machine_name);
		if (!$conflict) {
			// Create and check for error
			if (taxonomy_vocabulary_save((object) $vocabulary) === FALSE) {
				// Send the machine_name of the vocabulary that caused the problem
				return $machine_name;
			}
			// Example: Retrieve the wrapper and update the description:
			$entity = taxonomy_vocabulary_machine_name_load($machine_name);
			$wrapper = entity_metadata_wrapper('taxonomy_vocabulary', $entity);
			$current = $wrapper->description->value();
			$wrapper->description = $current . ' Created by Entity recipe module';
			$wrapper->save(); // To delete use: $wrapper->delete()
		}
	}
	return FALSE;
}

/**
 * Installs the default terms needed by our module.
 */
function entity_recipe_install_terms() {
	$terms = _entity_recipe_default_terms();
	foreach (array_keys(_entity_recipe_default_vocabularies()) as $machine_name) {
		// Get the vocabulary entity and wrapper
		$entity = taxonomy_vocabulary_machine_name_load($machine_name);
		$wrapper = entity_metadata_wrapper('taxonomy_vocabulary', $entity);
		// Make sure the vocabulary hasn't been populared yet.
		if ($wrapper->term_count->value() <= 1) {
			$vid = $wrapper->vid->value();
			entity_recipe_install_term_tree($vid, $terms[$machine_name]);
		}				
	}
}

/**
 * Install a term tree using recursion.
 */
function entity_recipe_install_term_tree($vid, $terms, $parent = NULL) {
	$data_common = array(
		'vid' => $vid, 
		'parent' => array($parent ? $parent : 0),
	);
	foreach ($terms as $key => $value) {
		$name = is_array($value) ? $key : $value;
		$children = is_array($value) ? $value : FALSE;
		$data = array('name' => $name) + $data_common;
		$entity = entity_create('taxonomy_term', $data);
		$wrapper = entity_metadata_wrapper('taxonomy_term', $entity);
		$wrapper->save();
		if ($children) {
			$tid = $wrapper->tid->value();	
			entity_recipe_install_term_tree($vid, $children, $tid);
		}
	}	
}

/**
 * Wrapper function to hold our default vocabularies.
 */
function _entity_recipe_default_vocabularies() {
	return array(
		'cuisine' => array(
			'name' => 'Cuisine',
			'machine_name' => 'cuisine',
			'description' => 'Contains terms representing different cuisines.',
		),
		'difficulty' => array(
			'name' => 'Difficulty',
			'machine_name' => 'difficulty',
			'description' => 'Contains terms representing difficulty levels.',			
		),
	);
}

/**
 * Wrapper function to hold our default terms.
 *
 * Each term is keyed by parent term name and may be and array itself, if the
 * term has children, or a string with the name if there's no children.
 */
function _entity_recipe_default_terms() {
	// The cuisine vocabulary.
	$terms['cuisine'] = array(
		'African' => array(
			'Central African' => array(
				'Cameroon',
				'Congo',
			),
			'East African' => array(
				'Burundi',
				'Kenya',
				'Maasai',
				'Tanzania',
				'Uganda',
			),
			'Horn African' => array(
				'Eritea',
				'Ethopia',
				'Somalia',
			),
			'North African' => array(
				'Aigeria',
				'Egybt',
				'Lybia',
				'Morocco',
			),
		),
	);
	// The difficulty vocabluary.
	$terms['difficulty'] = array(
		'Beginner' => array(
			'Level 1',
			'Level 2',
			'Level 3',
		),
		'Intermediate' => array(
			'Level 1',
			'Level 2',
			'Level 3',
		),
		'Expert' => array(
			'Level 1',
			'Level 2',
			'Level 3',
		),
	);
	return $terms;
}

/**
 * Adds the 'type' entity bundle-field to the ingredient table.
 */
function entity_recipe_update_7205(&$sandbox) {
  $type_schema = array(
  	'description' => 'The type of this ingredient.',
  	'type' => 'varchar',
  	'length' => 32,
  	'not null' => TRUE,
  	'default' => 'standard',
  );
  db_add_field('ingredient', 'type', $type_schema);
}

/**
 * Adds the 'ingredient_type' table to store information about each defined
 * bundle of the ingredient entity.
 */
function entity_recipe_update_7207(&$sandbox) {
	$table_name = 'ingredient_type';
  $schema[$table_name] = array(
  	'description' => 'Stores information about defined ingredient types.',
  	'fields' => array(
  		'id' => array(
  			'type' => 'serial',
  			'not null' => TRUE,
  			'description' => 'Primary key: Unique ingredient type ID.',
  		),
  		'type' => array(
  			'description' => 'The machine-readable name of this ingredient type.',
  			'type' => 'varchar',
  			'length' => 32,
  			'not null' => TRUE,
  		),
  		'label' => array(
  			'description' => 'The human-readable name of this ingredient type.',
  			'type' => 'varchar',
  			'length' => 255,
  			'not null' => TRUE,
  			'default' => '',
  		),
  		'weight' => array(
  			'description' => 'The weight of this ingredient type compared to others.',
  			'type' => 'int',
  			'not null' => TRUE,
  			'size' => 'tiny',
  			'default' => 0,
  		),
  		'data' => array(
  			'description' => 'A serialized array with additional data for this 
  				ingredient type.',
  			'type' => 'text',
  			'not null' => FALSE,
  			'size' => 'big',
  		),
  		'status' => array(
  			'description' => 'The exportable status of the entity type.',
  			'type' => 'int',
  			'not null' => TRUE,
  			'size' => 'tiny',
  			// Set to: ENTITY_CUSTOM (Not safe to use constants at this point)
  			'default' => 0x01,
  		),
  		'module' => array(
  			'description' => 'The name of providing module if the entity type has 
  				been defined in code.',
  			'type' => 'varchar',
  			'length' => 255,
  			'not null' => FALSE,
  		),
  	),
		'primary key' => array('id'),
		'unique keys' => array(
			'type' => array('type'),
		),
  );
	db_create_table($table_name, $schema[$table_name]);
}