<?php 

/**
 * Install file for the Entity recipe module.
 */

/**
 * Implements hook_install().
 *
 * Install default vocabularies.
 */
function entity_recipe_install() {
	entity_recipe_install_vocabularies(); // No need to handle errors here???
}

/**
 * Implements hook_schema().
 *
 * Defines our entities' base tables.
 */
function entity_recipe_schema() {
  $schema['ingredient'] = array(
    'description' => 'Hypothetical ingredient table',
    'fields' => array(
      'iid' => array(
        'description' => 'Primary key',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Name of the ingredient',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array(
      'iid',
    ),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  $schema['recipe_ingredient'] = array(
    'description' => 'Hypothetical table of recipe ingredients',
    'fields' => array(
      'riid' => array(
        'description' => 'Primary key',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'rid' => array(
        'description' => 'Foreign key: recipe (imaginary for this example)',
        'type' => 'int',
        'size' => 'big',
        'default' => 0,
        'not null' => TRUE,
      ),
      'iid' => array(
        'description' => 'Foreign key: ingredient',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'qty' => array(
        'description' => 'Numerical quantity of units',
        'type' => 'float',
        'not null' => TRUE,
      ),
      'qty_unit' => array(
        'description' => 'Name of units',
        'type' => 'varchar',
        'length' => 255,
        'default' => "''",
        'not null' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'ingredient_on_recipe' => array(
        'table' => 'ingredient',
        'columns' => array('iid' => 'iid'),
      ),  
    ),
    'primary key' => array(
      'riid',
    ),
  );

  return $schema;
}

/**
 * Installs the default vocabularies needed by the module.
 *
 * @return
 *   Returns the machine_name if there was an error during installation,
 *   false otherwise.
 */
function entity_recipe_install_vocabularies() {
	$vocabularies = array(
		array(
			'name' => 'Cuisine',
			'machine_name' => 'cuisine',
			'description' => 'Contains terms representing different cuisines.',
		),
		array(
			'name' => 'Difficulty',
			'machine_name' => 'difficulty',
			'description' => 'Contains terms representing difficulty levels.',
		),
	);
	foreach ($vocabularies as $vocabulary) {
		// We don't want to override existing vocabularies
		$conflict = taxonomy_vocabulary_machine_name_load($vocabulary['machine_name']);
		if (!$conflict) {
			// Create and check for error
			if (taxonomy_vocabulary_save((object) $vocabulary) === FALSE) {
				// Send the machine_name of the vocabulary that caused the problem
				return $vocabulary['machine_name'];
			}
		}
	}
	return FALSE;
}

/**
 * Install default vocabularies introduced in version 2 of the module (7.x-2.0).
 */
function entity_recipe_update_7200(&$sandbox) {
	if ($machine_name = entity_recipe_install_vocabularies()) {
		throw new DrupalUpdateException('Error occured when attempting create 
			vocabulary: ' . $machine_name);
	}
}