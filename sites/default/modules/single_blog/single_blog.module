<?php

/**
 * @file
 * Enables a single-user blog.
 */

define('SINGLE_BLOG_NODE_TYPE', 'article');
define('SINGLE_BLOG_LIST_COUNT', 5);

/**
 * Return a list of blog entries.
 * 
 * @param $number
 *   The number of blog entries to return.
 * @return
 *   A result set object containing the list of blog entries.
 */
function single_blog_list($number) {
  // Use the database API to retrieve our data.
  // @see http://drupal.org/node/310096
  $query = db_select('node', 'n')
           ->fields('n', array('nid', 'title', 'created', 'uid'))
           ->condition('type', SINGLE_BLOG_NODE_TYPE)
           ->condition('status', 1)
           ->orderBy('created', 'DESC')
           ->range(0, $number)
           ->addTag('node_access')
           ->execute();
  
   return $query;
}

/**
 * Implements hook_block_info().
 */
function single_blog_block_info() {
  $blocks = array();
  
  // The array key defines the $delta parameter used in all other block hooks.
  $blocks['recent'] = array(
    // The name of the block on the administration page.  
    'info' => t('Recent blog posts.'),  
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view().
 * 
 * @param $delta
 *   The name of the requested block.
 */
function single_blog_block_view($delta) {
  // Create an empty block
  $block = array(
    'subject' => '',
    'content' => '',  
  ); 
  // Check which block is being requested.
  if ($delta == 'recent') {
    // Set the block title.
    $block['subject'] = t('Recent blog posts');
    // Check if the user can access the content.
    if (user_access('access content')) {
      //Retrieve the most recent nodes.
      $result = single_blog_list(SINGLE_BLOG_LIST_COUNT);
      // Create links for each blog entry.
      $items = array();
      foreach ($result as $node) {
        $items[] = array(
          'data' => array(
            '#theme' => 'single_blog_block_item',
            '#node' => $node,  
          ),
          'class' => array('node-' . $node->nid),  
        );
      }
      if(!empty($items)) {
        // Theme the list of blog entries.
        $block['content']['list'] = array(
          '#theme' => 'item_list__single_blog',
          '#items' => $items,
          '#pre_render' => array('single_blog_item_list_child_render'),  
        );
        // Add a link to the full list of blog entries.
        $block['content']['more'] = array(
          '#theme' => 'more_link',
          '#url' => 'blog',
          '#title' => t('Read the latest blog entries.'),  
        );
        // Add a CSS file to style the block
        $block['content']['#attached']['css'][] = drupal_get_path('module', 'single_blog') . '/single-blog.css';
      }
    }
  }
  return $block;
}

/**
 * Render the child elements of theme_item_list() before its data is themed.
 */
function single_blog_item_list_child_render($elements) {
  foreach (array_keys($elements['#items']) as $key) {
    // Take the renderable array that we set in single_blog_block_view() and
    // render it into the string that theme_item_list() expects.
    if (is_array($elements['#items'][$key]['data'])) {
      $elements['#items'][$key]['data'] = drupal_render($elements['#items'][$key]['data']);
    }
  }
  return $elements;
}

/**
 * Implements hook_theme().
 */
function single_blog_theme($existing, $type, $theme, $path) {
  return array(
    'single_blog_block_item' => array(
      'variables' => array(
        'node' => NULL,  
      ),
      'template' => 'single-blog-block-item',  
    ),  
  );
}

/**
 * Preprocesses single blog block item variables. Since we own this theme hook
 * we need to prefix the function with template_.
 */
function template_preprocess_single_blog_block_item(&$variables) {
  $node = $variables['node'];
  // Create a renderable array for the title.
  $variables['title'] = array(
    '#type' => 'link',
    '#title' => $node->title,
    '#href' => 'node/' . $node->nid,  
  );
  // Format the creation date of the node.
  $variables['created'] = $node->created;
  $variables['date'] = format_date($node->created, 'custom', 'F d - Y');
  // Load the account object with the node's creator and store it in a
  // variable for themer convenience.
  $variables['user'] = user_load($node->uid);
  // Theme the username.
  $variables['name'] = theme('username', array('account' => $variables['user']));
}