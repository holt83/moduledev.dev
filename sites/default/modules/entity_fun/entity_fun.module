<?php

/**
 * @file
 * Contains entity code experiments.
 */

/**
 * Implements hook_init().
 */
function entity_fun_init() {
	static $called = FALSE;
	if (!$called) {
		// Play around with node 50
		$node = entity_load('node', array(50));
		$node = $node[50];
		$node_wrapper = entity_metadata_wrapper('node', $node);
		$file_wrapper = $node_wrapper->field_image->file;
    //file_put_contents("/home/drupalpro/debug/debug.txt", print_r($node_wrapper->body->type(), TRUE), FILE_EXISTS_REPLACE);
		// Some fun the file entity, which is a single-bundle-non-fieldable entity.
		$file_entity_wrapper_1 = _entity_fun_save_file_with_entity_api();
		$result = _entity_fun_save_file_with_file_api();
		// Some fun with vocabulary entities:
		$vocabulary_wrapper = _entity_fun_create_vocabulary('Entity test vocabulary', 
			'entity_test_vocabulary');
	}
	module_load_install('entity_recipe');
	entity_recipe_install_terms();
}

/**
 * Saves a file (FILE_EXISTS_REPLACE) entity using the entity API. 
 */
function _entity_fun_save_file_with_entity_api() {
	global $user;

	$uri = 'public://helloworld.txt';
	$content = "Hello world!\nI am programming Drupal 7 entities.";

	$uri = file_unmanaged_save_data($content, $uri, FILE_EXISTS_REPLACE);
	// Setup the values data array expected by entity_create.
	$data = array(
		'fid' => NULL,
		'uri' => $uri,
		'filename' => drupal_basename($uri),
		'filemime' => file_get_mimetype($uri),
		'uid' => $user->uid,
		// If this is not set, the file will be removed on a cron job (6 hours).
		'status' => FILE_STATUS_PERMANENT,
	);
	$entity = entity_create('file', $data);
	// We could use $enity->save() here if we dont need the wrapper.
	$wrapper = entity_metadata_wrapper('file', $entity);

	return $wrapper->save();
}

/**
 * Saves a file (FILE_EXISTS_REPLACE) entity using the file API. 
 */
function _entity_fun_save_file_with_file_api() {
	$uri = 'public://helloworld_temp.txt';
	$content = "Hello world!\nI am programming Drupal 7 entities.";
	$file = file_save_data($content, $uri, FILE_EXISTS_REPLACE);
	// We can get a wrapper with much less code than with the entity API.
	$wrapper = entity_metadata_wrapper('file', $file);
	// Value() return the wrapped entity.
	$wrapper->value()->status = FILE_STATUS_PERMANENT;
	$wrapper->save();
	// $wrapper->delete() will delete entity and also file if type is file.

	// Alternatively we could also load the entity:
	$entity = entity_load_unchanged('file', $wrapper->getIdentifier());
	$entity->status = FILE_STATUS_PERMANENT;
	return entity_save('file', $entity);
}

/**
 * Creates a vocabulary with the entity API.
 */
function _entity_fun_create_vocabulary($name, $machine_name) {
	// Only create the vocabulary if it doesn't exists allready.
	if (!taxonomy_vocabulary_machine_name_load($machine_name)) {
		$data = array(
			'name' => $name,
			'machine_name' => $machine_name,
			'description' => 'A vocabulary created with the entity API.',
		);
		$entity = entity_create('taxonomy_vocabulary', $data);
		$wrapper = entity_metadata_wrapper('taxonomy_vocabulary', $entity);
		$wrapper->save();
		// Above we use a wrapper. If we don't need it, it's easier to use the
		// taxonomy API: 
		// $status = taxonomy_vocanulary_save((object) $data);
		return $wrapper;
	}
	return FALSE;
}