<?php

/**
 * @file
 * 
 * Provides an example of creation of a custom entity using the entity module.
 */

/**
 * Implements hook_entity_info().
 */
function postit_entity_info() {
  $entity_info['postit'] = array(
    'label' => t('Postit Note'),
    'entity class' => 'PostIt',
    'controller class' => 'PostItController',
    'base table' => 'postit',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'pid',
    ),
    'static cache' => TRUE,
    'bundles' => array(
      'postit' => array(
        'label' => 'PostIt',
        'admin' => array(
          'path' => 'admin/structure/postit/manage',
          'access arguments' => array('administer postits'),
        ),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'postit_create',
    'access callback' => 'postit_access',
    'module' => 'postit',
    'admin ui' => array(
      'path' => 'admin/content/postit',
      'file' => 'postit.admin.inc',
      'controller class' => 'PostItUIController',
      'menu wildcard' => '%postit',
    ),
  );
  return $entity_info;
}

/**
 * Determines whether the given user has access to a postit note.
 * 
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $postit
 *   Optionally a postit. If nothing is given, access for all postits is 
 *   determined. 
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 */
function postit_access($op, $postit = NULL, $account = NULL) {
  if (user_access('administer postits', $account)) {
    return TRUE;
  }
  if (in_array($op, array('view', 'update', 'create', 'delete'))) {
    if (user_access($op . ' postits', $account)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Fetch a postit object from the database. 
 * 
 * Note that the wildcard specified in hook_entity_info() much match the prefix
 * for this function for Drupal to pick it up.
 *
 * @param $pid
 *   Integer specifying the postit id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $postit object or FALSE if it cannot be loaded.
 *
 * @see model_load_multiple()
 */
function postit_load($pid = NULL, $reset = FALSE) {
  $pids = (isset($pid) ? array($pid) : array());
  $postit = postit_load_multiple($pids, $reset);
  return $postit ? reset($postit) : FALSE;
}
 
/**
 * Load multiple postits based on certain conditions.
 *
 * @param $pids
 *   An array of postit IDs.
 * @param $conditions
 *   An array of conditions to match against the {postit} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of postit objects, indexed by pid.
 *
 * @see entity_load()
 * @see model_load()
 */
function postit_load_multiple($pids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('postit', $pids, $conditions, $reset);
}

/**
 * Delete a postit
 */


/**
 * Save a Postit note in the database.
 */
function postit_save($postit) {
  return entity_get_controller('postit')->save($postit);
}

/**
 * The class used for postit entities.
 */
class PostIt extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'postit');
  }
  
  /**
   * Specifies the default label, which is picked up by label() by default.
   */
  protected function defaultLabel() {
    return '';
  }

  /**
   * Specifies the default uri, which is picked up by uri() by default.
   */
  protected function defaultUri() {
    return array('path' => 'postit' . $this->pid);
  }  
  
}

/**
 * Implements hook_menu().
 */
function postit_menu() {
  $items['admin/structure/postit/manage'] = array(
    'title' => 'Postit Admin',
    'description' => t('Manage Postit structure.'),
    'page callback' => 'postit_info',
    'access arguments' => array('administer postits'),
  );
  $items['postit/%postit'] = array(
    'title callback' => 'postit_page_title',
    'title arguments' => array(1),
    'page callback' => 'postit_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view postits'),
    'type' => MENU_CALLBACK,
  );
  $items['postit/add'] = array(
    'title' => 'Add Postit!',
    'page callback' => 'postit_add',
    'access arguments' => array('create postit'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function postit_permission() {
  return array(
    'administer postits' => array(
      'title' => t('Administer Postits'),
      'restrict access' => TRUE,  
    ),
    'view postits' => array(
      'title' => t('View PostIts'),
    ),
    'create postits' => array(
      'title' => t('Create PostIts'),
    ),
    'update postits' => array(
      'title' => t('Edit PostIts'),
    ),
    'delete postits' => array(
      'title' => t('Delete PostIts'),
    ),
  );
}

/**
 * Page callback
 */
function postit_info() {
  return t('Welcome to the administration page for your Postits!.');
}

/**
 * Page Title callback
 */
function postit_page_title($postit) {
  return $postit->pid;
}

/**
 * Page callback
 */
function postit_page_view($postit, $view_mode = 'full') {
  $postit->content = array();
  // Build field content.
  field_attach_prepare_view('postit', array($postit->pid => $postit), $view_mode);
  entity_prepare_view('postit', array($postit->pid => $postit));
  $postit->content += field_attach_view('postit', $postit, $view_mode);
  $postit->content['note'] = array(
    '#prefix' => '<p>',
    '#suffix' => '</p>',
    '#markup' => $postit->note,
  );
  return $postit->content;
}

/**
 * Page callback
 */
function postit_add() {
  $postit = (object) array(
    'pid' => '',
    'type' => 'postit',
    'note' => '',
  );
  return drupal_get_form('postit_add_form', $postit);
}

/**
 * Form builder for adding new Postits.
 */
function postit_add_form($form, &$form_state, $postit) {
  $form['note'] = array(
    '#type' => 'textfield',
    '#title' => t('Note'),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  field_attach_form('postit', $postit, $form, $form_state);
  return $form;
}

/**
 * Validate callback for the postit_add_form.
 */
function postit_add_form_validate($form, &$form_state) {
  $postit_submission = (object)$form_state['values'];
  field_attach_form_validate('postit', $postit_submission, $form, $form_state);
}

/**
 * Submit callback for the postit_add_form.
 */
function postit_add_form_submit($form, &$form_state) {
  $postit_submission = (object)$form_state['values'];
  field_attach_submit('postit', $postit_submission, $form, $form_state);
  $postit = postit_save($postit_submission);
  $form_state['redirect'] = "postit/$postit->pid";
}

/**
 * Implements hook_field_extra_fields().
 */
function postit_field_extra_fields() {
  $return = array();
  $return['postit']['postit'] = array(
    'form' => array(
      'note' => array(
        'label' => t('Note'),
        'description' => t('Postit Note'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'note' => array(
        'label' => t('Note'),
        'description' => t('Postit Note'),
        'weight' => 0,
      ),
    ),    
  );
  return $return;
}

 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 